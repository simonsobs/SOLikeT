sz_data_file: gnfw_test_projections.txt
beam_file: beam_f150_daynight.txt 
transform_type: Hankel #FFT or Hankel
#optional beam response file
beam_response: False #False, or give file
cov_ksz_file: cov_diskring_ksz_varweight_bootstrap.txt
#optional 2-halo file
twohalo_term: twohalo_cmass_average.txt #False, or give file. Need to flesh out this option more, but the idea is that if False it will use two_halo.py to calculate a 2h term

redshift: 0.55 
mass_halo_mean_Msol: 1.e13
frequency_GHz: 150.
#input_model: "gnfw"

params:
  Omega_m:
    value: 0.25
  Omega_b:
    value: 0.044
  hh:
    value: 0.7
  Omega_L:
    value: 0.75
  rhoc_0:
    value: 2.77525e2
  C_OVER_HUBBLE:
    value: 2997.9
  XH:
    value: 0.76 #hydrogen fraction
  v_rms:
    value: 1.06e-3 #v_rms/c

  gnfw_rho0:
    prior:
      min: 1.0
      max: 6.0
    ref: 3.1864410705359125
    latex: \log_{10}\rho_0
  gnfw_bt_ksz:
    prior:
      min: 1.0
      max: 10.0
    ref: 3.45493977635
    latex: \beta_k
  gnfw_A2h_ksz:
    prior:
      min: 0.01
      max: 5.0
    ref: 1.0
    latex: A_{k2h}


#prior: #al<bt for ksz
#   ksz_al_less_than_bt: 'lambda gnfw_al_ksz,gnfw_bt_ksz:
#                        stats.uniform.logpdf(gnfw_bt_ksz-gnfw_al_ksz,0,10.)'

